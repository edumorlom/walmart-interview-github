{"version":3,"sources":["IssuesSelectionPanel.tsx","IssueViewPanel.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Issues","props","useState","currentPage","setCurrentPage","searchQuery","setSearchQuery","filteredIssues","issues","filter","issue","title","body","String","number","user","login","state","includes","filterIssueBySearchQuery","allIssues","chunkedIssues","chunk","issuesInCurrentPage","className","onChange","e","target","value","placeholder","map","IssueSelection","onClick","setSelectedIssue","Pagination","totalPages","length","substringIssueTitle","substring","allPageIndices","Array","from","keys","pageIndex","IssueViewPanel","CommentView","isOriginalAuthor","time","comments","comment","i","originalAuthorStyle","UserProfile","allowDangerousHtml","window","location","href","src","avatar_url","App","data","setData","undefined","selectedIssue","setComments","setSelectedIssueAndFetchComments","fetchComments","comments_url","history","replaceState","useEffect","fetch","then","response","json","comments_api","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5d75eecf.chunk.js","sourcesContent":["import {Issue} from './Issue'\nimport chunk from 'lodash.chunk'\nimport {useState} from 'react';\n\n\nexport default function Issues(props: {allIssues: Issue[], setSelectedIssue: (issue: Issue) => void}): JSX.Element {\n    // Keep track of any words the user has entered into the search query.\n    const [currentPage, setCurrentPage] = useState<number>(0);\n    const [searchQuery, setSearchQuery] = useState<string>(\"\");\n\n    // Filter issues by the user's search query.\n    const filteredIssues = filterIssueBySearchQuery(props.allIssues, searchQuery) || props.allIssues\n\n    // Divide the issues into chunks of MAX_ISSUES_TO_DISPLAY\n    const MAX_ISSUES_TO_DISPLAY = 10\n    const chunkedIssues = chunk(filteredIssues, MAX_ISSUES_TO_DISPLAY)\n\n    // Select the current chunk/page to show from the array of issues.\n    const issuesInCurrentPage = chunkedIssues[currentPage] || []\n\n    // Function that updates the searchQuery any time the user types something into the array.\n    const onSearchType = (e: any) => {\n        setSearchQuery(e.target.value)\n    }\n\n    return (\n        <div className={\"issue-selection-panel\"}>\n            <input className={\"panel search\"} onChange={onSearchType} placeholder={\"Search Issues\"}></input>\n            <div className={\"panel\"}>\n                {issuesInCurrentPage.map(issue => <IssueSelection\n                                                        key={issue.number}\n                                                        issue={issue} onClick={() => {\n                                                            props.setSelectedIssue(issue)\n                                                        }}/>)}\n            <Pagination setCurrentPage={setCurrentPage}\n                        currentPage={currentPage}\n                        totalPages={chunkedIssues.length}/>\n            </div>\n        </div>\n    )\n}\n\nfunction IssueSelection(props: {issue: Issue, onClick: () => void}): JSX.Element {\n    // Sometimes title can be very long, if it exceeds our desired length, shorten the title\n    // and append ... at the end\n    let substringIssueTitle = props.issue.title\n    const MAX_TITLE_LENGTH = 70\n    if (substringIssueTitle.length >= MAX_TITLE_LENGTH) {\n        substringIssueTitle = substringIssueTitle.substring(0, MAX_TITLE_LENGTH)\n        substringIssueTitle += \"...\"\n    }\n\n    return (\n        <div className=\"issue selection\" onClick={props.onClick}>\n            <h4 className={\"title\"}>\n                <span className={props.issue.state}>{props.issue.number + \". \"}</span>\n                {substringIssueTitle}\n            </h4>\n        </div>\n    )\n}\n\nfunction Pagination(props: {setCurrentPage: (page: number) => void, currentPage: number, totalPages: number}): JSX.Element {\n    // Create an array of totalPages elements: [0, 1, 2, 3, 4, 5 ... totalPages]\n    const allPageIndices = Array.from(Array(props.totalPages).keys())\n\n    // For every page index, create a button.\n    return (\n        <div className={\"pagination\"}>\n            {allPageIndices.map(pageIndex => <button key={pageIndex}\n                                                     className={props.currentPage === pageIndex ? \"selected\" : \"\"}\n                                                     onClick={() => props.setCurrentPage(pageIndex)}>{pageIndex + 1}</button>)}\n        </div>\n    )\n}\n\n\nfunction filterIssueBySearchQuery(issues: Issue[], searchQuery: string): Issue[] {\n    // TODO(edumorales): find a more efficient way to sort so that it can also account for typos.\n    return issues.filter(issue => {\n        // Combine all strings into one, and search within that one string.\n        const allContent = issue.title + issue.body + String(issue.number) + issue.user.login + issue.state\n        return allContent.includes(searchQuery)\n    })\n}","import ReactMarkdown from 'react-markdown'\nimport {Issue, Comment} from './Issue'\nimport User from './User'\n\nexport default function IssueViewPanel(props: {issue?: Issue, comments: Comment[]}): JSX.Element {\n\n    return (\n        <div className={\"panel issue-view-panel\"}>\n            {props.issue &&\n            <>\n                <h2 className={\"title \" + props.issue.state}>{\"Issue \" + props.issue.number}</h2>\n                <h3 className={\"title\"}>{props.issue.title}</h3>\n                <CommentView isOriginalAuthor={true} user={props.issue.user} time={\"Today\"} body={props.issue.body}/>\n                {!!props.comments.length && <h3 className={\"title\"}>Comments</h3>}\n                {\n                    props.comments.map((comment, i) => {\n                        return (\n                        <CommentView key={i} isOriginalAuthor={false} user={comment.user} time={\"Today\"} body={comment.body}/>\n                        )\n                    })\n                }\n            </>}\n        </div>\n    )\n}\n\n\nfunction CommentView(props: {isOriginalAuthor: boolean, user: User, body: string, time: string}): JSX.Element {\n    const originalAuthorStyle = props.isOriginalAuthor ? \"original-author\": \"\"\n    return (\n        <div className={\"comment \" + originalAuthorStyle}>\n            <UserProfile user={props.user}/>\n            <div>\n                <ReactMarkdown allowDangerousHtml>\n                    {props.body}\n                </ReactMarkdown>\n            </div>\n        </div>\n    )\n}\n\nfunction UserProfile(props: {user: User}){\n    return (\n        <div className={\"user-profile\"} onClick={() => window.location.href = \"https://github.com/\" + props.user.login}>\n            <img className={\"avatar\"} src={props.user.avatar_url}/>\n            <h3 className=\"username\">{\"@\" + props.user.login}</h3>\n        </div>\n    )\n}","import {useEffect, useState} from 'react';\nimport IssuesSelectionPanel from './IssuesSelectionPanel'\nimport IssueViewPanel from './IssueViewPanel'\nimport {Issue, Comment} from './Issue'\n\nimport './index.css';\n\nexport default function App() {\n  const [data, setData] = useState<Issue[]>([]);\n  const [selectedIssue, setSelectedIssue] = useState<Issue | undefined>(undefined);\n  const [comments, setComments] = useState<Comment[]>([]);\n\n  const setSelectedIssueAndFetchComments = (issue: Issue) => {\n    setSelectedIssue(issue)\n    fetchComments(issue.comments_url)\n    window.history.replaceState(null, \"\", String(issue.number));\n  }\n\n\n  useEffect(() => {\n    fetch(\"https://api.github.com/repos/walmartlabs/thorax/issues\").then(\n      response => {\n        response.json().then(\n          response => {\n            if (response) {\n              setData(response)\n              setSelectedIssueAndFetchComments(response[0])\n            }\n          }\n        )\n      }\n    )\n  }, [])\n\n  const fetchComments = (comments_api: string | undefined) => {\n    if (!comments_api) return\n\n    fetch(comments_api).then(\n        response => {\n        response.json().then(\n            response => {\n            if (response) {\n                setComments(response)\n            }\n            }\n        )\n        }\n    )\n  }\n\n  return (\n        <div className={\"panels-container\"}>\n          <IssuesSelectionPanel allIssues={data} setSelectedIssue={setSelectedIssueAndFetchComments}/>\n          <IssueViewPanel issue={selectedIssue} comments={comments}/>\n        </div>\n      )\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}